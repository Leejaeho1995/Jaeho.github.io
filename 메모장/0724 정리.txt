폰트이름 : font-family : '폰트이름1안' ,'폰트이름2안' ,,,,sans-serif;
폰트크기 : font-size
폰트두께 : font-weight
행간 : line-height 
이탤릭체, 일반체 :font-style
font-variant : (작은 대분자)



축약 : (font-style) , (font-variant), font-weight , font-size/line-height,
font-family;

Ex : font: 16px/1.3 'Malgum Gotic',sans-serif;

box-model

외곽선 : boder (boder-radius) -모서리 /-- >두께width, 선의종류 style,선의색깔color
외곽선의 외곽선 :outline
바깥여백 : margin
안쪽여백 : padding
축약: boder: 1px solid #333;

background : 
background -color : 색상
background-image :url(이미지경로)
background-repeat : no-repeat, repeat , repeat-x . repeat-y , inherit; (반복)
background-attachment : 
 scroll(기본값) : 이미지가 요소에 상대적인 위치 (요소안에서는 고정상태)
 local : 이미지가 스크롤할때 요소에 상대적인 위치 (요소안의 내용과 같은 취급)
 fixed : 이미지가 뷰화면에 고정

 inherit :부모값을 따라가라


background -position ==>좌, 우 값 먼저


display : inline 과 block ==> inline-block 인위적으로 바꿀 수 있다.

max-width (최대): 
min-width (최소):


목록
ul - 번호가 없는 목록
ol - 번호가 있는 목록

position: (위치값들은 쌓인다)
static - 기본값 , 위치값이 없다. margin과 다른 box에 비교되어 위치한다.

absolute - 위치값을 갖게 된다. (부모 박스를 기준, (단, 위치값이 있는 부모박스)) -->자식

relative - 위치값을 가지면서 다른 박스들과 비교한 위치를 가질 수 있다. -->부모

absolute relative 는 z-index 값을 이용하여 상하를 결정지을 수 있다.


fixed - view 포인트에 고정되는 박스

sticky 

float :
left;
right;
none;
inherit




         git

VCS 프로그램 (Version Control System)
형상관리툴

-시간에 따른 작업물들을 관리 해준다.
-다차원적인 팀작업 하는것이 가능.


git config --global user.name "본인 아이디또는 이름"
git config --global user.email "본인 이메일"

gt config --global init.defaultBranch main

//폴더를 git이 관리하도록 하는 명령어
git init

git의 상태를 확인하는 명령어
git status

//git에게 관리를 맡기지 않는 것들을 저장하는파일
중요한정보들은 git에 저장하지 않음
.gitignore

gitignore 명령어 ( 모든파일 file.c ) ( git-scm.com/docs/gitugnore 에서 확인 가능 )
# 주석은 이거


# /를 제외한 모든 문자열과 매칭
*

# /를 포함한 모든 문자열과 매칭
**

# /를 제외한 하나의 문자와 매칭
?

# []안에 있는 모든 각각의 문자들과 매칭
[abc]
# {a, b,c} {}안에 있는 ,로 구분된 각각의 문자열들과 매칭

# [^abc] []안에 있는 모든 각각의 문자들을 제외한 문자들과 매칭
[a-z] []안에서 -사이에 있는 첫문자와 마지막 문자범위에 있는 모든 문자들에 대해 매칭

# /
/부터 시작하는 경로 패턴은 하위 디렉토리에 반복적으로 적용되지 않음.

# !
!로 시작하는 패턴은 .gitignore 에서 제외되며, 무시되지 않는다.
----------------------------------------------
예시
# 확장자가 .js파일은 무시
*.js

# test.js는 무시하지 않음
!test.js

#현재 디렉토리에 있는 test2.js파일은 무시하지만, 하위 디렉토리에 있는 test2.js는 무시하지 않음.
/test2.js
#src의 하위 디렉토리에 있는 모든 확장자가 js인 파일은 무시
src/ *.js

1.git에 등록하는 방법 (변화한 부분을 저장)

2.되돌리는 두 가지 방법 -
1)reset 
2) revert
3.gui (sourcetree)갖고 진행해보기

1.git에 등록하는 방법

 -현상태를 확인(변화한 상태를 확인)
    git status
 -파일 하나만 등록 하는 방법
    git add 파일명
 -모든 파일을 등록
    git add .

add 다음에 해야하는 commit (git이 관리를 시작)

로그 확인
git log

cf) vi 에디터 사용법 (리눅스의 기본 에디터 -cli 만들어진 에디터)
vi 에디터 -  명령모드  / 입력모드

k : 커서를 한 칸 위로 이동
j : 커서를 한 칸 아래로 이동



branch --작업하는 위치
git init
git status



종료 : !q .  !wq;

git commit -m "메세지"

로그확인
git log

add+ commit 을 동시에단 >삭제이후 다른파일 추가된경우 사용할 수 없음
git commit -am "메세지"




switch (조건){
case "a":
        asdasdasdasdsadsad
break;
case "b":
asdasdsadasd
break;
default "c":
adfadsfasdf
}
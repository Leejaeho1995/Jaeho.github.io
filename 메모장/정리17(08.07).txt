append() -요소안의 뒤에 내용을 추가한다
prepend() 요소안의 앞에 내용을 추가
after() 요소 밖의 뒤에 내용을 추가
before() 요소 밖의 앞에 내용을 추가

remove() 요소 자체를 삭제
empty()요소 안의 내용을 삭제

이미지 크기만큼 애니메이트한다.
안보이게 된 첫 번째 이미지를 clone() => 복제
요소의 뒷부분에 clone()한 이미지를 붙힌다.(appendTo)
clone()의 원본인 첫 번째 이미지를 삭제한다
style 위치값을 초기화 한다

위 1~5번의 과정을 만든후 무한  반복한다.

class추가 :addClass()
class삭제 : removeClass()
class추가+삭제 : toggleClass()

class 있는지 확인:hasClass()

//참고 vanilla JS//
요소.calssList.add()
요소.classList.remove()
요소.classList.toggle()

요소.classList.replace("원래이름","바꿀이름");


----------------------------



1.DBMS ( Data Base Management System)- DB를 관리(Management)하는 시스템(System)

-DB란 :table들이 모여서 이루는 데이터 단위

DB관리란:DB의 유지보수 (검색,삭제,추가,수정) 
-CRUD (Create, Retrieve ,Upadte , Delete)

대량의 데이터를 처리하는 시스템
다양한 자료구조와 검색구조 (소팅,인덱싱,...)사용해 "빠른"검색 가능.
Retrieve >>>>>>>>>>>>>>CRD
검색에 최적화 하는 작업이 가장 중요한 일


DBMS의ㅣ 종류
계층형 데이터베이스

네트워크형 데이터베이스

●관계형 데이터베이스 ( RDBMS) -mysql ,오라클
-테이블 기반의 DBMS
-테이블 - 컬럼 형태의 데이터 저장방식
-테이블과 테이블의 연관관계 (외래키)를 이용해 필요한 정보를 구한다.
-모델링은 E-R(Entity Relationship) 모델을 사용
└RDBMS의 특징
-1.데이터를 테이블 단위로 관리 
└하나의 테이블은 여러 개의 컬럼으로 구성됨. (제목 이름 나이 비밀번호 주소 등등의 컬럼)

-2.테이블끼리의 중복정복는 최소화시킴
└동일한 데이터가 여러군데 중복되어 존재하면 데이터의 수정시 문제발생 확률이 높아진다.
└정규화(Normalize -> 정규형)

-3.사용방식
└여러 테이블을 합쳐 큰 테이블을 생성(Join)해서 필요한 정보를 찾아내는 방식
RDBMS 기본용어
●스키마 Database, 테이블의 정의내역

●SQL쿼리 (SQL Query)
└관계형 DBMS를 사용하는 전용 질의언어

└대소문자는 가리지않음.
●기본키 (Primary Key: PK)
└테이블에서 하나의 레코드를 지정 할 수있는 하나 이상의 컬럼집합

└중복 X Null X 
●외래키 (Foregin Key: FK)
└어떤 테이블의 기본키가 다른 테이블의 컬럼에 들어 있는경우

●테이블 (Table)
└정보들의 묶음 단위

●컬럼 ( Column)
└테이블을 구성하는 정보들 (학생테이블 - 이름 주소 전화번호 나이 등등..컬럼)

●레코드 (Record)
└테이블에 들어 있는 여러가지의 인스턴스 하나하나를 지정 (테이블에 들어있는 컬럼하나하나를 레코드)

●도메인값 (Domain Value)
└각 컬럼에서 나올 수 있는 후보 값 (이름("문자")나이 ("숫자")등에서만 쓸 수있는 후보값들)

객체지향 데이터베이스
객체관지형 데이터베이스 (ORDEMS)
●NoSQL ( Not Only SQL)

-------------------------------
정렬
1.정렬되어 있지 않은 데이터중 원하는것을 찾을 확률(데이터의 절반)
최선: 1번만에 찾음 . 최악:n === 평균: n/2 
2.이런것을 방지하기 위해 정렬이 필요함.(퀵정렬 / 힙정렬) 두가지를 주로 사용.
-----------------------
DB에 자료를 인덱스 (index)
인덱스의 종류 -
이진검색 (Binary Search) -정렬된 데이터중에 반을 나뉘어 필요한 부분에서 또 다시 반나뉘어 계속반복하여 찾는방법
1000개의 데이터중 원하는 데이터를 찾을때 최대 검색수 2의 n승 > 1000 (n=10) 2n(10) = 1,024 — 킬로(1000)의 근사값으로 쓰인다. 예를 들어 1,024 바이트 ≒ 1 킬로바이트이다.
이론적으로 10번안에 찾을 수 있음.

----------My SQL------------------------------
show databases; => 유 리스트 표시
use 데이터베이스이름; => 선택한 데이터베이스를 사용한다.
show tables; =>선택한 데이터베이스안에 있는 테이블을 표시
desc 테이블이름 => 선택한 테이블의 구조를 표시
select * from 테이블이름; => 선택한 테이블의 내용을 표시
quit 또는 exit => 접속 종료